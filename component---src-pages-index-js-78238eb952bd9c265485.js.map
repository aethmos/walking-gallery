{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["query","IndexPage","data","categories","nodes","map","category","link","relativeDirectory","images","imagesByCategory","group","filter","edges","node","edge","totalImages","length","thumbnail","thumbIdx","undefined","title","totalCount","image","childImageSharp","fluid","src","showHomeButton","value","index","to","className","styles","slide","descriptionPanel"],"mappings":"yPAoCaA,EAAK,aA+CHC,UA5EG,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACZC,EAAaD,EAAKC,WAAWC,MAAMC,KAAI,SAAAC,GACvCA,EAASC,KAAOD,EAASE,kBACzB,IAAIC,EAASP,EAAKQ,iBACbC,MACAC,QAAO,SAAAD,GAAK,OAAIA,EAAME,MAAM,GAAGC,KAAKN,oBAAsBF,EAASE,qBAAmB,GACtFK,MACAR,KAAI,SAAAU,GAAI,OAAIA,EAAKD,QAGtB,OAFAR,EAASU,YAAcP,EAAOQ,OAC9BX,EAASY,UAAYT,EAAOH,EAASa,UAC9Bb,KACRM,QAAO,SAAAN,GAAQ,YAA2Bc,IAAvBd,EAASY,aAE/B,OACI,kBAAC,IAAD,CAAQG,MAAYnB,EAAKC,WAAWmB,WAAa,eAAgBC,MAAOpB,EAAW,GAAGe,UAAUM,gBAAgBC,MAAMC,IAAKC,gBAAgB,GACvI,kBAAC,IAAD,KAAUxB,EAAWE,KAAI,SAACuB,EAAOC,GAAR,OACrB,kBAAC,OAAD,CAAMC,GAAI,IAAMF,EAAMpB,kBAAoB,KACtC,kBAAC,IAAD,CAAiBuB,UAAWC,IAAOC,MAAOR,MAAOG,EAAMV,UAAUM,gBAAgBC,OAC7E,yBAAKM,UAAWC,IAAOE,kBACnB,4BAAKN,EAAMP","file":"component---src-pages-index-js-78238eb952bd9c265485.js","sourcesContent":["import React from 'react';\r\nimport Layout from '../components/layout';\r\nimport {graphql, Link} from \"gatsby\";\r\nimport styles from \"../components/Carousel.module.scss\";\r\nimport BackgroundImage from \"gatsby-background-image\";\r\nimport Slider from \"../components/LoadableSlider\";\r\n\r\nconst IndexPage = ({data}) => {\r\n    let categories = data.categories.nodes.map(category => {\r\n        category.link = category.relativeDirectory;\r\n        let images = data.imagesByCategory\r\n            .group\r\n            .filter(group => group.edges[0].node.relativeDirectory === category.relativeDirectory)[0]\r\n            .edges\r\n            .map(edge => edge.node);\r\n        category.totalImages = images.length;\r\n        category.thumbnail = images[category.thumbIdx];\r\n        return category;\r\n    }).filter(category => category.thumbnail !== undefined);\r\n\r\n    return (\r\n        <Layout title={'' + data.categories.totalCount + ' Collections'} image={categories[0].thumbnail.childImageSharp.fluid.src} showHomeButton={false}>\r\n            <Slider>{ categories.map((value, index) => (\r\n                <Link to={'/' + value.relativeDirectory + '/'}>\r\n                    <BackgroundImage className={styles.slide} fluid={value.thumbnail.childImageSharp.fluid}>\r\n                        <div className={styles.descriptionPanel}>\r\n                            <h3>{value.title}</h3>\r\n                            {/*<span>{value.date}</span>*/}\r\n                        </div>\r\n                    </BackgroundImage>\r\n                </Link>\r\n            )) }</Slider>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport const query = graphql`\r\n            query CategoriesAndImages{\r\n                categories: allCategoryJson(\r\n                    sort : {\r\n                        order: DESC,\r\n                        fields: date\r\n                    }\r\n                ) {\r\n                    nodes {\r\n                        id\r\n                        title\r\n                        relativeDirectory\r\n                        date(fromNow: true)\r\n                        thumbIdx\r\n                    }\r\n                    totalCount\r\n                }\r\n                imagesByCategory: allFile(\r\n                    filter: {\r\n                        extension: {regex: \"/jpg|png/\"}\r\n                    }, sort: {\r\n                        order: ASC,\r\n                        fields: name\r\n                    })\r\n                {\r\n                    group(field: relativeDirectory) {\r\n                        edges {\r\n                            node {\r\n                                id\r\n                                name\r\n                                extension\r\n                                relativeDirectory\r\n                                childImageSharp {\r\n                                    fluid(maxHeight: 1920, quality: 75, cropFocus: ATTENTION) {\r\n                                        aspectRatio\r\n                                        sizes\r\n                                        src\r\n                                        srcSet\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `;\r\n\r\nexport default IndexPage;\r\n"],"sourceRoot":""}